#! /usr/bin/env python3
#  -*- coding: utf-8 -*-

# ======================================================
#    enhlb_support.py
#  ------------------------------------------------------
# Created for PAGE and PAGE users.
# Written by G.D. Walters
# Copyright © 2023, 2024, 2025 by G.D. Walters and Designated Geek Software
# This source code is released under the MIT License
# See license.txt
# ======================================================
# Creation date 2025-02-12
# ======================================================
#
# Purpose:
#     This program was written as a demonstration of my 'Enhanced Scrolled Listbox'
#
#     A version of this program will be available on Github
# ======================================================
# Support module generated by PAGE version 8.1rcc
#  in conjunction with Tcl version 8.6
#    Feb 12, 2025 04:08:42 AM CST  platform: Linux
#    Feb 12, 2025 06:09:29 AM CST  platform: Linux
#    Feb 12, 2025 06:13:30 AM CST  platform: Linux
#    Feb 12, 2025 06:29:10 AM CST  platform: Linux
#    Feb 14, 2025 03:09:35 AM CST  platform: Linux

import sys
import os
import platform
import datetime
import webbrowser


import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter import messagebox

import enhlb

_debug = True  # False to eliminate debug printing from callback functions.
location = enhlb._location
programName = "Enhanced Listbox Demo"
version = "0.1.0"


def main(*args):
    """Main entry point for the application."""
    global root
    root = tk.Tk()
    root.protocol("WM_DELETE_WINDOW", root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = enhlb.Toplevel1(_top1)
    # Creates a toplevel widget.
    global _top2, _w2
    _top2 = tk.Toplevel(root)
    _w2 = enhlb.About(_top2)
    startup()
    root.mainloop()


mylist = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten"]

movielist = [
    "1  The Shawshank Redemption - 1994",
    "2  The Godfather - 1972",
    "3  The Dark Knight - 2008",
    "4  The Godfather Part II - 1974",
    "5  12 Angry Men - 1957",
    "6  Schindler's List - 1993",
    "7  The Lord of the Rings: The Return of the King - 2003",
    "8  Pulp Fiction - 1994",
    "9  The Lord of the Rings: The Fellowship of the Ring - 2001",
    "10  The Good, the Bad and the Ugly - 1966",
    "11  Forrest Gump - 1994",
    "12  Fight Club - 1999",
    "13  The Lord of the Rings: The Two Towers - 2002",
    "14  Inception - 2010",
    "15  Star Wars: Episode V - The Empire Strikes Back - 1980",
    "16  The Matrix - 1999",
    "17  Goodfellas - 1990",
    "18  One Flew Over the Cuckoo's Nest - 1975",
    "19  Se7en - 1995",
    "20  Seven Samurai - 1954",
    "21  It's a Wonderful Life - 1946",
    "22  The Silence of the Lambs - 1991",
    "23  City of God - 2002",
    "24  Saving Private Ryan - 1998",
    "25  Interstellar - 2014",
    "26  Life Is Beautiful - 1997",
    "27  The Green Mile - 1999",
    "28  Star Wars: Episode IV - A New Hope - 1977",
    "29  Terminator 2: Judgment Day - 1991",
    "30  Back to the Future - 1985",
    "31  Spirited Away - 2001",
    "32  The Pianist - 2002",
    "33  Psycho - 1960",
    "34  Parasite - 2019",
    "35  Léon: The Professional - 1994",
    "36  The Lion King - 1994",
    "37  Gladiator - 2000",
    "38  American History X - 1998",
    "39  The Departed - 2006",
    "40  The Usual Suspects - 1995",
    "41  The Prestige - 2006",
    "42  Whiplash - 2014",
    "43  Casablanca - 1942",
    "44  Grave of the Fireflies - 1988",
    "45  Harakiri - 1962",
    "46  The Intouchables - 2011",
    "47  Modern Times - 1936",
    "48  Once Upon a Time in the West - 1968",
    "49  Rear Window - 1954",
    "50  Cinema Paradiso - 1988",
    "51  Alien - 1979",
    "52  City Lights - 1931",
    "53  Apocalypse Now - 1979",
    "54  Memento - 2000",
    "55  Django Unchained - 2012",
    "56  Indiana Jones and the Raiders of the Lost Ark - 1981",
    "57  WALL·E - 2008",
    "58  The Lives of Others - 2006",
    "59  Sunset Blvd. - 1950",
    "60  Paths of Glory - 1957",
    "61  The Shining - 1980",
    "62  The Great Dictator - 1940",
    "63  Avengers: Infinity War - 2018",
    "64  Witness for the Prosecution - 1957",
    "65  Aliens - 1986",
    "66  Spider-Man: Into the Spider-Verse - 2018",
    "67  American Beauty - 1999",
    "68  Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb - 1964",
    "69  The Dark Knight Rises - 2012",
    "70  Oldboy - 2003",
    "71  Inglourious Basterds - 2009",
    "72  Amadeus - 1984",
    "73  Coco - 2017",
    "74  Toy Story - 1995",
    "75  Joker - 2019",
    "76  Braveheart - 1995",
    "77  The Boat - 1981",
    "78  Avengers: Endgame - 2019",
    "79  Princess Mononoke - 1997",
    "80  Once Upon a Time in America - 1984",
    "81  Good Will Hunting - 1997",
    "82  Your Name. - 2016",
    "83  3 Idiots - 2009",
    "84  Singin' in the Rain - 1952",
    "85  Requiem for a Dream - 2000",
    "86  Toy Story 3 - 2010",
    "87  High and Low - 1963",
    "88  Capernaum - 2018",
    "89  Star Wars: Episode VI - Return of the Jedi - 1983",
    "90  Eternal Sunshine of the Spotless Mind - 2004",
    "91  2001: A Space Odyssey - 1968",
    "92  Reservoir Dogs - 1992",
    "93  Come and See - 1985",
    "94  The Hunt - 2012",
    "95  Citizen Kane - 1941",
    "96  M - 1931",
    "97  Lawrence of Arabia - 1962",
    "98  North by Northwest - 1959",
    "99  Vertigo - 1958",
    "100  Ikiru - 1952",
]


def startup():
    # ====================================================================
    #    Set the bindings for the 'Enhanced' Listbox
    # ====================================================================
    do_enhlistbox_bindings()
    # ====================================================================
    #    Load the list box with items
    # ====================================================================
    load_listbox(ListItems=movielist)

    # Load the About form information.
    load_about_information()
    # Hide the About form
    hide_about()


def on_btnExit(*args):
    """
    on_btnExit
       Callback for the exit button
    """
    if _debug:
        print("enhlb_support.on_btnExit")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    sys.exit()


def load_about_information():
    infostring = f"{programName} {version}\n\nCreated by Greg Walters.\n\nThis program has been released under the MIT Licence.  Please see license.txt.\n\n\nCopyright © 2023, 2024, 2025 by Greg Walters and Designated Geek Software\n\n"
    _w2.MessageData.set(infostring)


def on_btnAbout(*args):
    """
    on_btnAbout
       Shows the about Toplevel form
    """
    if _debug:
        print("enhlb_support.on_btnAbout")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()

    show_about()


def on_btnAboutDismiss(*args):
    """
    on_btnAboutDismiss
       Hides the About Toplevel form
    """
    if _debug:
        print("enhlb_support.on_btnAboutDismiss")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    hide_about()


def on_btnHelp(*args):
    if _debug:
        print("enhlb_support.on_btnHelp")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    helppath = os.path.join(location, "docs", "html")

    webbrowser.open_new(helppath + "/index.html")


def show_main():
    """
    show_main
        Restores the main Toplevel form from icon state
    """
    global root
    root.deiconify()


def hide_main():
    """
    hide_main
        Sets the main Toplevel form to icon state (hides it)
    """
    global root
    root.withdraw()


def show_about():
    """
    show_about
        Restores the About Toplevel form from icon state
    """
    global _top2
    _top2.deiconify()


def hide_about():
    """
    show_about
        Sets the About Toplevel form to icon state (hides it)
    """
    global _top2
    _top2.withdraw()


# ====================================================================
#
# ====================================================================

# ====================================================================
#    The following four functions support the enhanced Listbox
# --------------------------------------------------------------------
# From your startup function call...
#
#     do_enhlistbox_bindings()
# then
#     load_listbox()
#
# The load_listbox function can take three optional parameters and one required parameter:
#      ListboxBackground
#      SelectionBackground
#      FavoriteBackground
#      ListItems

# The first three can be either a proper Tk Colour name or colour hex value
# The last (ListItems) must be a list of items.  It should 'point to' the name of the list.
#
# --------------------------------------------------------------------
# Be sure that you copy all four functions into your project...
#       do_enhlistbox_bindings
#       load_listbox
#       on_lbmotion
#       manage_favorites
# ====================================================================


def do_enhlistbox_bindings():
    """
    This function creates special bindings for the Enhanced Listbox
    """
    global listbox
    listbox = _w1.Scrolledlistbox1
    global favList
    favList = []
    listbox.bind("<<ListboxSelect>>", on_listboxSelect)
    listbox.bind("<Motion>", on_lbmotion)
    listbox.bind("<Button-3>", manage_favorites)


def on_listboxSelect(e):
    indx = _w1.Scrolledlistbox1.curselection()
    # print(indx)
    # print(type(indx))
    itm = _w1.Scrolledlistbox1.get(indx[0])
    # SelectedItem.set(f"Selected Item: {indx[0]} - {itm}")
    print(f"Selected Item: {indx[0]} - {itm}")


def load_listbox(
    ListboxBackground="lightgoldenrodyellow",
    SelectionBackground="seagreen2",
    FavoriteBackground="skyblue2",
    ListItems=[],
):
    """
    function load_listbox
       This function will set up colours for background of the listbox,
    background for the item selected and background for the favorites list.
    All arguments are optional, since the function has defaults 'built in' to the definition.

    Args:
        ListboxBackground (str, optional): _description_. Defaults to "lightgoldenrodyellow".
        Selectionbackground (str, optional): _description_. Defaults to "seagreen2".
        FavoriteBackground (str, optional): _description_. Defaults to "skyblue2".
        listItems (list)
    """

    global listboxBg, selectBg, favBg, listitems
    listboxBg = ListboxBackground
    selectBg = SelectionBackground
    favBg = FavoriteBackground
    listbox.configure(background=listboxBg)
    listbox.configure(selectbackground=selectBg)
    listbox.configure(selectborderwidth=2)
    listbox.configure(activestyle=NONE)
    listbox.configure(font="-family {DejaVuSansMono} -size 10")
    listbox.configure(takefocus=0)
    for itm in ListItems:
        _w1.Scrolledlistbox1.insert("end", itm)


# Captures mouse motion within the Listbox widget
def on_lbmotion(event):
    """
    function on_lbmotion

    Tracks the mouse within the Listbox selection area.

    Args:
        event (_type_): _description_
    """
    global listbox
    global mousex, mousey
    x, y = event.x, event.y
    mousex = x
    mousey = y


# ------------------------------------------------------
# Along with lbmotion, allows a <Button-3> to "semi-select" an item in the
# Listbox.
# ------------------------------------------------------


def manage_favorites(*args):
    """
    function manage_favorites

    Parameters: NONE
    Returns: NONE
    """
    global textbox, listbox
    global favList
    global listboxBg, selectBg, favBg

    if _debug:
        print("Into function manage_favorites")
        print(args)
        for arg in args:
            print(f"   {arg}")
    global mousex, mousey
    X = listbox.winfo_pointerx()
    y = listbox.winfo_pointery()
    pos = listbox.nearest(mousey)
    indx = listbox.curselection()
    itm = listbox.get(pos)
    tagname = itm

    if itm in favList:
        favList.remove(itm)
        # listbox.itemconfig(pos, background="lightgoldenrodyellow")
        listbox.itemconfig(pos, background=listboxBg)
        # _w1.StatusInfo2.set(f"  User removed {itm} from list")
    else:
        favList.append(itm)
        # listbox.itemconfigure(pos, background="skyblue2")
        listbox.itemconfigure(pos, background=favBg)
        # _w1.StatusInfo2.set(f"  User added {itm} to list")


if __name__ == "__main__":
    enhlb.start_up()
